# Assemble thupxe rootfs			-*- shell-script -*-

# Supported kernel command line arguments for this initramfs script:
# thupxeapi: optional, URL of thupxe API server (e.g. http://10.37.0.1). When omitted, the following values will be used, if available:
#   - Root path option (option 17) assigned by dhcp server, if begins with 'http';
#   - Gateway assigned by dhcp server, i.e. http://{{ gateway_ip }}.
# thupxeroot: optional, local storage device (e.g. /dev/sda1, PARTUUID=foo, PARTLABEL=bar), default to 'PARTLABEL=thupxeroot'
# thupxeoff: optional, offset of device to use in format '$start:$size:$end' (e.g. '-25G:20G:0'), default to '0:0:0' (whole device)
# thupxeformatï¼šoptional, whether to format partition if no valid EXT4 fs is detected (* | no | force), no means never formatting and raising an error, force means always formating without detection, default to ''
# thupxeclear: optional, whether to clear local permanent storage on reboot (* | yes), default to ''

thupxe_args () {
	thupxeroot="PARTLABEL=thupxeroot"
	thupxeapi_serv=""
	thupxeoff="0:0:0"
	thupxedev=""
	thupxepart=""
	thupxeuuid=""
	thupxeformat=""
	thupxeclear=""

	for x in $(cat /proc/cmdline); do
		case $x in
		thupxeroot=*)
			thupxeroot=${x#thupxeroot=}
			;;
		thupxeapi=*)
			thupxeapi_serv=${x#thupxeapi=}
			;;
		thupxeoff=*)
			thupxeoff=${x#thupxeoff=}
			;;
		thupxeformat=*)
			thupxeformat=${x#thupxeformat=}
			;;
		thupxeclear=*)
			thupxeclear=${x#thupxeclear=}
			;;
		esac
	done
}

panic () {
	if [ -n "$thupxeapi_serv" ]; then
		thupxe_api_call "record_failure" --data-urlencode "msg=$*"
	fi
	echo "Boot Failure: $@"
	read -t 30 -p "Press Enter to a Rescue Shell"
	if [ "$?" -ne 0 ]; then
		sync
		reboot -f
	fi
	# Call original panic
	(
		. /scripts/functions
		panic "$@"
	)
}

# Override maybe_break from scripts/functions
maybe_break () {
	# So we can close the network interface just before init exec-ed
	if [ "init" = "$1" ]; then
		if [ -n "$DEVICE" ]; then
			ip address flush $DEVICE
			ip link set $DEVICE down
			DEVICE=""
		fi
		thupxeapi_serv=""
	fi

	# Call original maybe_break
	(
		. /scripts/functions
		maybe_break "$@"
	)
}

thupxe_mkpart_ready () {
	local begin
	local end
	local size
	local tol_size

	# We override blkid here to make probing fstype always successful
	blkid () {
		command "blkid" "$@"
		return 0
	}

	local rootdev
	local rootdev_succ
	rootdev_succ=0
	while read -d ';' rootdev; do
		local_device_setup "$rootdev" "Partition Storing Pxe Data" false
		if [ "$?" -eq 0 ]; then
			rootdev_succ=1
			break;
		fi
	done << EOF
${thupxeroot};
EOF

	# And we remove our hack here....
	unset -f blkid

	if [ "$rootdev_succ" -eq 0 ]; then
		panic "ALERT! None of ${thupxeroot} exists. Dropping to a shell!"
	fi

	thupxedev="${DEV}"
	tol_size="$(blockdev --getsz "${thupxedev}")"

	if [ "$(($tol_size))" -le 0 ]; then
		panic "thupxe: Invaild Device ${thupxedev}, getsz=${tol_size} is zero"
	fi

	thupxeoff="$(numfmt --from=iec --to-unit=512 --format="%.0f" --delimiter=":" --field="-" --invalid=ignore -- "$thupxeoff")"
	IFS=':' read begin size end << EOF
$thupxeoff
EOF
	begin=$(( $begin ))
	end=$(( $end ))
	size=$(( $size ))
	begin=$(( ($begin % $tol_size + $tol_size) % $tol_size ))
	end=$(( ($end % $tol_size + $tol_size) % $tol_size ))
	size=$(( $size ))

	if [ "$begin" -eq 0 ]; then
		if [ "$size" -ne 0 -a "$end" -ne 0 ]; then
			begin=$(( $end - $size ))
		fi
	fi

	if [ "$size" -eq 0 ]; then
		if [ "$end" -ne 0 ]; then
			size=$(( $end - $begin ))
		else
			size=$(( $tol_size - $begin ))
		fi
	fi

	if [ "$(( $size + $begin ))" -gt "$tol_size" -o "$begin" -lt 0 -o "$size" -le 0 ]; then
		panic "thupxe: Device ${thupxedev} of ${tol_size} size cannot hold a slice from begin=${begin} and size=${size}"
	fi

	dmsetup create thupxeroot --table "0 ${size} linear ${thupxedev} ${begin}" --noudevsync
	dmsetup mknodes thupxeroot

	if [ ! -e /dev/mapper/thupxeroot ]; then
		panic "Cannot initialize device mapper"
	fi

	thupxepart="/dev/mapper/thupxeroot"
}

thupxe_read_uuid () {
	local guid="$(blkid --probe --output=value --match-tag PART_ENTRY_UUID "$thupxedev")"
	thupxeuuid="$(echo "$guid" | tr -d '-' | fold -w 2 | tr '\n' ':' | sed -r 's/:+$//')"
}

thupxe_api_call () {
	local url="${thupxeapi_serv}/$1"
	local curlopt=""
	if [ -n "$thupxemac_addr" ]; then
		curlopt="${curlopt} --data-raw mac=${thupxemac_addr}"
	fi
	if [ -n "$thupxeuuid" ]; then
		curlopt="${curlopt} --data-raw uuid=${thupxeuuid}"
	fi
	shift
	curl --silent --show-error --location --connect-timeout 30 --fail --get $curlopt "$url" "$@"
}


thupxe_netconf () {
	configure_networking

	if [ -z "${DEVICE}" ]; then
		panic "thupxe: Network configuration failed"
	fi

	if [ -z "${thupxeapi_serv}" ]; then
		case $ROOTPATH in
		http*)
			thupxeapi_serv="${ROOTPATH}"
			;;
		esac
	fi
	if [ -z "${thupxeapi_serv}" ]; then
	       thupxeapi_serv="http://${IPV4GATEWAY}"
	fi
	thupxemac_addr="$(cat "/sys/class/net/${DEVICE}/address")"
}

thupxe_fetch_img () {
	local intf_speed
	local cast_stage
	local skip_rsync=""

	cd /run/thupxe
	if [ "$USE_MULTICAST" = "true" ]; then
		intf_speed="$(cat "/sys/class/net/${DEVICE}/speed")"
		while true; do
			cast_stage="$(thupxe_api_call "cast_stage?speed=${intf_speed}")"
			if [ "$intf_speed" -eq "$cast_stage" ]; then
				break;
			fi
			sleep 5
		done
		for dummy in $(seq 0 10); do
			rm -f "storage/images.tar.zstd"
			udp-receiver --file "storage/images.tar.zstd" --nokbd --nosync --nokbd --receive-timeout 20
			if [ "$?" -eq "0" ]; then
				mkdir -p "storage/images/"
				zstdcat "storage/images.tar.zstd" | tar -C "storage/images/" -xv
				if [ "$?" -eq "0" ]; then
					rm -f "storage/images.tar.zstd"
					skip_rsync=y
					break
				fi
			fi
		done
	fi
	if [ "$skip_rsync" != "y" ]; then
		for dummy in $(seq 0 10); do
			rsync -avHhP --delay-updates --exclude "/version" "$RSYNC_ADDR" "storage/images/"
			if [ "$?" -eq "0" ]; then
				rsync -avHhP --delay-updates --delete --delete-after "$RSYNC_ADDR" "storage/images/"
				if [ "$?" -eq "0" ]; then
					break
				fi
			fi
		done
	fi
	sync
	for dummy in $(seq 0 10); do
		umount -f "storage"
		if [ "$?" -eq 0 ]; then
			sync
			sync
			reboot -f
			panic "reboot failed"
		fi
	done
	panic "umount failed"
}

thupxe_loadconf () {
	local success=0
	for dummy in $(seq 0 10); do
		thupxe_api_call "pxe.conf" > /run/thupxe/thupxe.conf
		if [ "$?" -eq 0 ]; then
			success=1
			break
		fi
	done
	if [ "$success" -eq 1 ]; then
		return 0;
	fi
	panic "Cannot load thupxe.conf, check configuration"
}

thupxe_premount () {
	local curr_ver=""
	local remote_ver=""

	mkdir -p /run/thupxe
	thupxe_netconf
	thupxe_mkpart_ready
	thupxe_read_uuid
	thupxe_loadconf
	mkdir -p /run/thupxe/storage
	if [ "$thupxeformat" != "force" ]; then
		mount -o rw -t ext4 "$thupxepart" "/run/thupxe/storage"
	else
		false
	fi
	if [ "$?" -ne 0 ]; then
		if [ "$thupxeformat" != "no" ]; then
			mkfs.ext4 -F "$thupxepart"
			mount -o rw -t ext4 "$thupxepart" "/run/thupxe/storage"
			if [ "$?" -ne 0 ]; then
				panic "Error format storage partition"
			fi
		else
			panic "No valid ext4 filesystem found"
		fi
	fi
	if [ "$thupxeclear" == "yes" ]; then
		rm -rf /run/thupxe/storage/perm
	fi
	mkdir -p /run/thupxe/storage/images /run/thupxe/storage/perm /run/thupxe/storage/work
	rm -rf /run/thupxe/storage/perm.del
	if [ -r "/run/thupxe/storage/images/version" ]; then
		curr_ver="$(cat /run/thupxe/storage/images/version)"
	fi
	remote_ver="$(thupxe_api_call "images/version")"
	(
		. /run/thupxe/thupxe.conf
		if [ "$curr_ver" != "$remote_ver" ]; then
			thupxe_fetch_img
		fi

		if [ "$ENABLE_USB" != "true" ]; then
			mkdir -p /run/systemd/system/
			ln -s /dev/null /run/systemd/system/udisks2.service
		fi
	)
}

thupxe_mountimages () {
	local images
	local overlay
	cd /run/thupxe
	images="$(cat storage/images/series)"
	overlay=""
	for img in $images; do
		mkdir -p "$img"
		mount -t squashfs "storage/images/$img" "$img"
		overlay="${overlay}:$img"
	done
	overlay="$(echo "$overlay" | sed 's/^://')"
	mount -t overlay -olowerdir="$overlay",upperdir="storage/perm",workdir="storage/work" overlay "$rootmnt"
	for img in $images storage; do
		umount -l "$img"
		rmdir "$img"
	done

	mkdir -p /run/interfaces.d
	cat > "/run/interfaces.d/$DEVICE" << EOF
auto $DEVICE
iface $DEVICE inet dhcp
EOF
	if [ -n "$thupxeuuid" ]; then
		echo "client $thupxeuuid" >> "/run/interfaces.d/$DEVICE"
	fi
}


thupxe_mountroot () {
	( thupxe_mountimages )
}

mount_top () {
	thupxe_args
	local_top
}

mount_premount () {
	thupxe_premount
}

mountroot () {
	thupxe_mountroot
}

mount_bottom () {
	local_bottom
}

mountfs () {
	:
}

# vim: set ft=sh:
